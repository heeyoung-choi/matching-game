{"version":3,"sources":["component/Square.js","component/Board.js","App.js","index.js"],"names":["Square","className","this","props","finish","onClick","face","value","Component","Board","style","display","gridTemplateColumns","size","gridGap","Array","keys","map","x","list","App","state","data","cur","point","enableClick","turn","restart","i","includes","concat","setState","length","slice","setTimeout","max","Math","floor","random","array","sort","temp","fill","Object","assign","rd","getRandomInt","push","shuffle","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95948739.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Square extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n        className={\"square btn \" + (this.props.finish ? \"finish\" : \"\")}\r\n        onClick= {() => {\r\n            return this.props.onClick()}}\r\n        >{this.props.face ? this.props.value : \"face down\"}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square\r\n","import Square from \"./Square\";\r\nimport React from 'react'\r\n\r\nexport default function Board(props) {\r\n    return (\r\n        \r\n        <div className=\"board\" style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${props.size}, 100px)`,\r\n            gridGap: '10px'\r\n        }}>\r\n            {[...Array(props.size**2).keys()].map(x => \r\n            <Square value={props.list[x]} \r\n            key={x}\r\n            onClick={() =>props.onClick(x)}\r\n            face={props.face[x]}\r\n            finish={props.finish[x]}\r\n            />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import Board from './component/Board';\nimport React, { Component } from 'react';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 3,\n      face: Array(2),\n      data: [],\n      cur: [],\n      finish: [],\n      point: 0,\n      enableClick: true,\n      turn: 0\n    };\n    this.restart(this.state.size);\n  }\n\n  handleClick(i) {\n    if (this.state.finish[i]) return;\n    if (!this.state.enableClick) return;\n    let cur = this.state.cur;\n    let data = this.state.data;\n    if (cur.includes(i)) return;\n    let face = this.state.face;\n    cur = cur.concat(i);\n    face[i] = !face[i];\n    this.setState({\n      cur: cur,\n      face: face,\n      turn: this.state.turn + 1\n    });\n    if (cur.length == 2) {\n      this.setState({\n        enableClick: false,\n      });\n      let finish = this.state.finish.slice();\n      let point = 0;\n      if (data[cur[0]] === data[cur[1]]) {\n        point = 100;\n        finish[cur[0]] = true;\n        finish[cur[1]] = true;\n      }\n      setTimeout(() => {\n        this.setState({\n          cur: [],\n          face: finish.slice(),\n          enableClick: true,\n          point: this.state.point + point,\n          finish: finish,\n        });\n      }, 500);\n    }\n  }\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  restart(size)\n  {\n    let temp = [...Array(size ** 2).fill(false)];\n    // console.log(temp)\n    let {face, data, finish} = Object.assign(this.state)\n    for (let i = 0; i < size ** 2 / 2; i++) {\n      let rd = this.getRandomInt(100);\n      data.push(rd);\n      data.push(rd);\n    }\n    this.shuffle(data);\n    face = temp;\n    finish = Array(size ** 2).fill(false);\n    this.setState({\n      size: size,\n      face: face,\n      finish: finish,\n      data: data,\n      point: 0,\n      turn: 0,\n      cur: []\n    })\n  }\n  render() {\n    return (\n      <div className='App'>\n        <div className='info'>\n          <h2>Point: {this.state.point}</h2>\n          <h2>Turns taken: {this.state.turn}</h2>\n        </div>\n        <div className=\"control-panel\">\n          <button \n          className=\"btn btn-control\"\n          onClick={() => this.restart(this.state.size)}\n          >Restart</button><button \n          className=\"btn btn-control\"\n          onClick={() => this.restart(3)}\n          >3</button><button \n          className=\"btn btn-control\"\n          onClick={() => this.restart(4)}\n          >4</button>\n          <button \n          className=\"btn btn-control\"\n          onClick={() => this.restart(5)}\n          >5</button>\n        </div>\n        <Board\n          size={this.state.size}\n          onClick={(i) => this.handleClick(i)}\n          face={this.state.face}\n          list={this.state.data}\n          finish={this.state.finish}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}