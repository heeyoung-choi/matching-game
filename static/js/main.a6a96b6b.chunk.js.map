{"version":3,"sources":["component/Square.js","component/Board.js","App.js","index.js"],"names":["Square","className","onClick","props","this","face","value","Component","Board","style","display","gridTemplateColumns","size","Array","keys","map","x","list","App","state","data","cur","finish","point","temp","fill","i","rd","getRandomInt","push","shuffle","console","log","length","slice","setTimeout","setState","concat","detect","max","Math","floor","random","array","sort","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAceA,EAZf,4JACI,WAAU,IAAD,OACL,OACI,wBACJC,UAAU,SACVC,QAAU,WACN,OAAO,EAAKC,MAAMD,WAHlB,SAIFE,KAAKD,MAAME,KAAOD,KAAKD,MAAMG,MAAQ,kBAP/C,GAA4BC,aCCb,SAASC,EAAML,GAC1B,OACI,qBAAKF,UAAU,QAAQQ,MAAO,CAC1BC,QAAS,OACTC,oBAAoB,UAAD,OAAYR,EAAMS,KAAlB,WAFvB,SAIK,YAAIC,MAAM,KAAD,IAACV,EAAMS,KAAM,IAAGE,QAAQC,KAAI,SAAAC,GAAC,OACvC,cAAC,EAAD,CAAQV,MAAOH,EAAMc,KAAKD,GAE1Bd,QAAS,kBAAKC,EAAMD,QAAQc,IAC5BX,KAAMF,EAAME,KAAKW,IAFZA,QCRV,IAuFQE,EAvFf,kDACE,WAAYf,GACX,IAAD,uBACE,cAAMA,IACDgB,MAAQ,CACXP,KAAO,EACPP,KAAOQ,MAAM,GACbO,KAAK,GACLC,IAAI,GACJC,OAAQ,GACRC,MAAO,GAIT,IAFA,IAAIC,EAAI,YAAQX,MAAM,KAAD,IAAC,EAAKM,MAAMP,KAAQ,IAAGa,MAAK,IAExCC,EAAI,EAAGA,EAAI,WAAKP,MAAMP,KAAQ,GAAI,EAAGc,IAC9C,CACE,IAAIC,EAAK,EAAKC,aAAa,KAC3B,EAAKT,MAAMC,KAAKS,KAAKF,GACrB,EAAKR,MAAMC,KAAKS,KAAKF,GAhBzB,OAkBE,EAAKG,QAAQ,EAAKX,MAAMC,MACxB,EAAKD,MAAMd,KAAOmB,EAClB,EAAKL,MAAMG,OAAST,MAAM,KAAD,IAAC,EAAKM,MAAMP,KAAQ,IAAGa,MAAK,GApBvD,EAFF,0CAyBE,WAAS,IAAD,EACuCrB,KAAKe,MAA7CP,EADC,EACDA,KAAMP,EADL,EACKA,KAAMe,EADX,EACWA,KAAMC,EADjB,EACiBA,IAAKC,EADtB,EACsBA,OAAQC,EAD9B,EAC8BA,MACpCQ,QAAQC,IAAIX,GACO,IAAfA,EAAIY,SAGFb,EAAKC,EAAI,MAAQD,EAAKC,EAAI,MAE5BC,EAAOD,EAAI,KAAM,EACjBC,EAAOD,EAAI,KAAM,EACjBE,IACAQ,QAAQC,IAAI,QAEd3B,EAAOiB,EAAOY,QACdb,EAAM,GAENc,WAAW/B,KAAKgC,SAAS,CACvBxB,KAAMA,EACNP,KAAMA,EACNe,KAAKA,EACLC,IAAKA,EACLC,OAAQA,EACRC,MAAMA,IACJ,QAhDV,yBAmDE,SAAYG,GAEV,IAAItB,KAAKe,MAAMG,OAAOI,GAAtB,CAEA,IAAIL,EAAMjB,KAAKe,MAAME,IACjBhB,EAAOD,KAAKe,MAAMd,KACtBgB,EAAMA,EAAIgB,OAAOX,GACjBrB,EAAKqB,IAAMrB,EAAKqB,GAChBtB,KAAKgC,SAAS,CACZf,IAAKA,EACLhB,KAAMA,IAERD,KAAKkC,YA/DT,0BAiEE,SAAaC,GACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,KAlEtC,qBAoEE,SAAQI,GACNA,EAAMC,MAAK,kBAAMJ,KAAKE,SAAW,QArErC,oBAuEE,WAAU,IAAD,OAEP,OACE,sBAAKzC,UAAU,MAAf,UACE,6BAAKG,KAAKe,MAAMI,QAChB,cAACf,EAAD,CACAI,KAAMR,KAAKe,MAAMP,KACjBV,QAAU,SAACwB,GAAD,OAAO,EAAKmB,YAAYnB,IAClCrB,KAAMD,KAAKe,MAAMd,KACjBY,KAAMb,KAAKe,MAAMC,cAhFzB,GAAyBb,aCEzBuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a6a96b6b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Square extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n        className=\"square\"\r\n        onClick= {() => {\r\n            return this.props.onClick()}}\r\n        >{this.props.face ? this.props.value : \"face down\"}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square\r\n","import Square from \"./Square\";\r\nimport React from 'react'\r\n\r\nexport default function Board(props) {\r\n    return (\r\n        <div className=\"board\" style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${props.size}, 1fr)`\r\n        }}>\r\n            {[...Array(props.size**2).keys()].map(x => \r\n            <Square value={props.list[x]} \r\n            key={x}\r\n            onClick={() =>props.onClick(x)}\r\n            face={props.face[x]}\r\n            />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import Board from \"./component/Board\";\nimport React, { Component } from 'react'\n\nexport class App extends Component {\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      size : 3,\n      face : Array(2),\n      data:[],\n      cur:[],\n      finish: [],\n      point: 0\n    }\n    let temp =  [...Array(this.state.size ** 2).fill(false)];\n    // console.log(temp)\n    for (let i = 0; i < this.state.size ** 2 / 2; i++)\n    {\n      let rd = this.getRandomInt(100)\n      this.state.data.push(rd)\n      this.state.data.push(rd)\n    }\n    this.shuffle(this.state.data)\n    this.state.face = temp\n    this.state.finish = Array(this.state.size ** 2).fill(false)\n    \n  }\n  detect(){\n    let {size, face, data, cur, finish, point} = this.state\n    console.log(cur)\n    if (cur.length === 2)\n    { \n      \n      if (data[cur[0]] === data[cur[1]])\n      {\n        finish[cur[0]] = true\n        finish[cur[1]] = true\n        point++;\n        console.log(\"bug\")\n      }\n      face = finish.slice()\n      cur = []\n    \n      setTimeout(this.setState({\n        size: size,\n        face: face,\n        data:data,\n        cur: cur,\n        finish: finish,\n        point:point\n      }), 1000)\n    }\n  }\n  handleClick(i)\n  {\n    if (this.state.finish[i])\n    return;\n    let cur = this.state.cur\n    let face = this.state.face\n    cur = cur.concat(i)\n    face[i] = !face[i]\n    this.setState({\n      cur: cur,\n      face: face\n    })\n    this.detect()\n  }\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <h1>{this.state.point}</h1>\n        <Board \n        size={this.state.size} \n        onClick ={(i) => this.handleClick(i)}\n        face={this.state.face}\n        list={this.state.data}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}