{"version":3,"sources":["component/Square.js","component/Board.js","App.js","index.js"],"names":["Square","className","this","props","finish","onClick","face","value","Component","Board","style","display","gridTemplateColumns","size","gridGap","Array","keys","map","x","list","App","state","data","cur","point","enableClick","temp","fill","i","rd","getRandomInt","push","shuffle","includes","concat","setState","length","slice","setTimeout","max","Math","floor","random","array","sort","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5effc284.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Square extends Component {\r\n    render() {\r\n        return (\r\n            <button \r\n        className={\"square \" + (this.props.finish ? \"finish\" : \"\")}\r\n        onClick= {() => {\r\n            return this.props.onClick()}}\r\n        >{this.props.face ? this.props.value : \"face down\"}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square\r\n","import Square from \"./Square\";\r\nimport React from 'react'\r\n\r\nexport default function Board(props) {\r\n    return (\r\n        \r\n        <div className=\"board\" style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: `repeat(${props.size}, 1fr)`,\r\n            gridGap: '10px'\r\n        }}>\r\n            {[...Array(props.size**2).keys()].map(x => \r\n            <Square value={props.list[x]} \r\n            key={x}\r\n            onClick={() =>props.onClick(x)}\r\n            face={props.face[x]}\r\n            finish={props.finish[x]}\r\n            />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import Board from \"./component/Board\";\nimport React, { Component } from 'react'\n\nexport class App extends Component {\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      size : 4,\n      face : Array(2),\n      data:[],\n      cur:[],\n      finish: [],\n      point: 0,\n      enableClick: true\n    }\n    let temp =  [...Array(this.state.size ** 2).fill(false)];\n    // console.log(temp)\n    for (let i = 0; i < this.state.size ** 2 / 2; i++)\n    {\n      let rd = this.getRandomInt(100)\n      this.state.data.push(rd)\n      this.state.data.push(rd)\n    }\n    this.shuffle(this.state.data)\n    this.state.face = temp\n    this.state.finish = Array(this.state.size ** 2).fill(false)\n    \n  }\n  \n  handleClick(i)\n  {\n    if (this.state.finish[i])\n    return;\n    if (!this.state.enableClick)\n    return;\n    let cur = this.state.cur\n    let data = this.state.data\n    if (cur.includes(i))\n    return;\n    let face = this.state.face\n    cur = cur.concat(i)\n    face[i] = !face[i]\n    this.setState({\n      cur: cur,\n      face: face\n    })\n    if (cur.length == 2)\n    {\n      this.setState({\n        enableClick: false\n      })\n      let finish = this.state.finish.slice()\n      let point = 0\n      if (data[cur[0]] === data[cur[1]])\n      {\n        point = 100\n        finish[cur[0]] = true\n        finish[cur[1]] = true\n      }\n      setTimeout(() => {\n        this.setState({\n          cur: [],\n          face: finish.slice(),\n          enableClick: true,\n          point: this.state.point + point,\n          finish: finish\n        })\n      }, 1000)\n    }\n  }\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <div className=\"info\">\n        <h1>{this.state.point}</h1>\n        </div>\n        <Board \n        size={this.state.size} \n        onClick ={(i) => this.handleClick(i)}\n        face={this.state.face}\n        list={this.state.data}\n        finish={this.state.finish}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}